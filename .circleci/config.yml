version: 2.1
jobs:
  checkout:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - restore_cache:
         keys:
           - build-machine-{{ checksum "Makefile" }}
      - run:
          name: 'Prepare build environment...'
          command: |
            if [ -d "linux-stable" ]; then
              echo 'Build environment was cached.'
            else
              echo 'Build environment was not cached.'
              sudo apt-get update -qq
              sudo apt-get install -y apt-utils
              sudo apt-get install -y sudo
              sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd
              git config --global user.email $GH_EMAIL
              git config --global user.name $GH_NAME
              make prepare_kernel
            fi
            ls
      - save_cache:
          key: build-machine-{{ checksum "Makefile" }}
          paths:
            - linux-stable
            - pristine
      - persist_to_workspace:
          root: .
          paths:
            - linux-stable
            - pristine
  patch:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'git config --global user.email $GH_EMAIL'
      - run: 'git config --global user.name $GH_NAME'
      - run: 'make patch'
      - run: 'cd patches && ls'
      - persist_to_workspace:
          root: .
          paths:
            - patches
  security:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'make compile_security_only'
  security_clang:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'ls'
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'wget https://apt.llvm.org/llvm.sh'
      - run: 'chmod +x llvm.sh'
      - run: 'sudo ./llvm.sh 13'
      - run: 'sudo ln -s /usr/bin/clang-13 /usr/bin/clang'
      - run: 'sudo ln -s /usr/bin/clang++-13 /usr/bin/clang++'
      - run: 'clang -v'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle_clang'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'make compile_security_only_clang'
  compile_default:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'make compile_kernel'
  compile_default_clang:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'wget https://apt.llvm.org/llvm.sh'
      - run: 'chmod +x llvm.sh'
      - run: 'sudo ./llvm.sh 13'
      - run: 'sudo ln -s /usr/bin/clang-13 /usr/bin/clang'
      - run: 'sudo ln -s /usr/bin/clang++-13 /usr/bin/clang++'
      - run: 'clang -v'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle_clang'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'make compile_kernel_clang'
  compile_no_flow_friendly:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_SECURITY_FLOW_FRIENDLY=y/CONFIG_SECURITY_FLOW_FRIENDLY=n/" .config'
      - run: 'make compile_kernel'
  compile_whole:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/# CONFIG_SECURITY_PROVENANCE_WHOLE_SYSTEM is not set/CONFIG_SECURITY_PROVENANCE_WHOLE_SYSTEM=y/" .config'
      - run: 'make compile_kernel'
  compile_persist:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/# CONFIG_SECURITY_PROVENANCE_PERSISTENCE is not set/CONFIG_SECURITY_PROVENANCE_PERSISTENCE=y/" .config'
      - run: 'make compile_kernel'
  sparse:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'sudo apt-get install -y sparse'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'mkdir -p test'
      - run: 'cd ~/build/linux-stable && make C=2 security/provenance/ &>  ~/build/test/sparse.txt || true'
      - run: 'cat ./test/sparse.txt'
      - persist_to_workspace:
          root: .
          paths:
            - test/sparse.txt
  flawfinder:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install -y flawfinder'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'mkdir -p test'
      - run: 'cd ~/build/linux-stable && flawfinder ./security/provenance > ~/build/test/flawfinder.txt'
      - run: 'cat ./test/flawfinder.txt'
      - persist_to_workspace:
          root: .
          paths:
            - test/flawfinder.txt
  checkpatch:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'mkdir -p test'
      - run: 'cd ~/build/linux-stable && ./scripts/checkpatch.pl --show-types --file security/provenance/*.c > ~/build/test/checkpatch.txt || true'
      - run: 'cd ~/build/linux-stable && ./scripts/checkpatch.pl --show-types --file security/provenance/include/*.h > ~/build/test/headers_checkpatch.txt || true'
      - run: 'cat ./test/checkpatch.txt'
      - run: 'cat ./test/headers_checkpatch.txt'
      - persist_to_workspace:
          root: .
          paths:
            - test/checkpatch.txt
            - test/headers_checkpatch.txt
  smatch:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'make prepare_smatch'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'mkdir -p test'
      - run: 'cd ~/build/linux-stable && make clean'
      - run: 'cd ~/build/linux-stable && make security CHECK="../smatch/smatch -p=kernel" C=1 >  ~/build/test/smatch.txt'
      - run: 'cat ./test/smatch.txt'
      - persist_to_workspace:
          root: .
          paths:
            - test/smatch.txt
  coccinelle:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install -y ocaml-native-compilers ocaml-findlib menhir libmenhir-ocaml-dev libpcre-ocaml-dev libparmap-ocaml-dev texlive-fonts-extra'
      - run: 'sudo apt-get install -y python3-dev'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cd ~/build && git clone https://github.com/coccinelle/coccinelle.git'
      - run: 'cd ~/build/coccinelle && git checkout 1.1.0'
      - run: 'cd ~/build/coccinelle && make clean'
      - run: 'cd ~/build/coccinelle && ./autogen'
      - run: 'cd ~/build/coccinelle && ./configure'
      - run: 'cd ~/build/coccinelle && make'
      - run: 'cd ~/build/coccinelle && sudo make install'
      - run: 'cp -f scripts/.config ~/build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd ~/build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'mkdir -p test'
      - run: 'cd ~/build/linux-stable && sed -i "/options = --use-gitgrep/d" .cocciconfig'
      - run: 'cd ~/build/linux-stable && make coccicheck MODE=report M=security/provenance > ~/build/test/cocci.txt || true'
      - run: 'cat ./test/cocci.txt'
      - persist_to_workspace:
          root: .
          paths:
            - test/cocci.txt
  tinkerbell:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev liblz4-tool liblz4-dev zstd'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'make prepare_tinkerbell'
      - run: 'cd scripts && make config_kernel'
      - run: 'pyenv version'
      - run: 'pyenv versions'
      - run: 'pyenv install --list'
      - run: 'pyenv install -v 2.7.16'
      - run: 'pyenv local 2.7.16'
      - run: 'pyenv version'
      - run: 'pip install --upgrade pip'
      - run: 'pip install virtualenv'
      - run: 'cd ~/build/graph-matching/scripts && make all'
      - persist_to_workspace:
          root: .
          paths:
            - test/cocci.txt
  deploy_dev:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y git rsync'
      - run: 'sudo apt-get install -y ruby'
      - run: 'ruby ./scripts/clean_test.rb'
      - run: 'cd test && ls'
      - deploy:
          name: Deploy
          command: |
            git config --global user.email $GH_EMAIL
            git config --global user.name $GH_NAME
            git status
            ls -l ./docs/img
            ls -l ./docs/dot
            mkdir -p output
            cd output
            echo "Cloning..."
            git clone https://github.com/camflow/camflow-dev
            cd camflow-dev
            git checkout dev
            echo "Copying..."
            mkdir -p docs
            mkdir -p scripts
            mkdir -p test
            rsync -r ../../docs/ ./docs
            rsync -r ../../scripts/ ./scripts
            rsync -r ../../test/ ./test
            echo "Check files are there"
            ls -l ./docs/img
            ls -l ./docs/dot
            git status
            git add .
            git status
            # is there any change
            if ! git diff-index --exit-code --quiet HEAD; then
              echo 'Committing...'
              git commit -a -m "[ci skip] CircleCI automated documentation generation and testing, based on commit ${CIRCLE_SHA1}"
              git push -q https://${GH_TOKEN}@github.com/camflow/camflow-dev.git dev
            else
              echo 'Nothing to commit.'
            fi
  release:
    docker:
      - image: circleci/golang
    steps:
      - attach_workspace:
          at: ~/build
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            ghr -t ${GH_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ~/build/patches/
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - checkout:
          filters:
            tags:
              only: /.*/
      - patch:
          requires:
            - checkout
          filters:
            tags:
              only: /.*/
      - security:
          requires:
            - checkout
      - security_clang:
          requires:
            - checkout
      - compile_default:
          requires:
            - security
            - security_clang
      - compile_default_clang:
          requires:
            - security
            - security_clang
      - compile_no_flow_friendly:
          requires:
            - security
            - security_clang
      - compile_whole:
          requires:
            - security
            - security_clang
      - compile_persist:
          requires:
            - security
            - security_clang
      - sparse:
          requires:
            - compile_default
            - compile_default_clang
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - flawfinder:
          requires:
            - compile_default
            - compile_default_clang
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - checkpatch:
          requires:
            - compile_default
            - compile_default_clang
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - smatch:
          requires:
            - compile_default
            - compile_default_clang
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - coccinelle:
          requires:
            - compile_default
            - compile_default_clang
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - deploy_dev:
          filters:
            branches:
              only:
                - dev
          requires:
            - sparse
            - flawfinder
            - checkpatch
            - smatch
            - coccinelle
      - release:
          requires:
            - patch
          filters:
            tags:
              ignore: /test/
            branches:
              ignore: /.*/
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
                - dev
    jobs:
      - checkout:
          filters:
            tags:
              only: /.*/
      - patch:
          requires:
            - checkout
          filters:
            tags:
              only: /.*/
      - security:
          requires:
            - checkout
      - security_clang:
          requires:
            - checkout
      - compile_default:
          requires:
            - security
            - security_clang
      - compile_default_clang:
          requires:
            - security
            - security_clang
      - compile_no_flow_friendly:
          requires:
            - security
            - security_clang
      - compile_whole:
          requires:
            - security
            - security_clang
      - compile_persist:
          requires:
            - security
            - security_clang
      - sparse:
          requires:
            - compile_default
            - compile_default_clang
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - flawfinder:
          requires:
            - compile_default
            - compile_default_clang
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - checkpatch:
          requires:
            - compile_default
            - compile_default_clang
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - smatch:
          requires:
            - compile_default
            - compile_default_clang
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - coccinelle:
          requires:
            - compile_default
            - compile_default_clang
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - deploy_dev:
          filters:
            branches:
              only:
                - dev
          requires:
            - sparse
            - flawfinder
            - checkpatch
            - smatch
            - coccinelle
