------------------------
security/provenance/fs.c
------------------------
WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#90: FILE: security/provenance/fs.c:90:
+#define declare_write_flag_fcn(fcn_name, flag)			    \
+	static ssize_t fcn_name(struct file *file,		    \
+				const char __user *buf,		    \
+				size_t count,			    \
+				loff_t *ppos)			    \
+	{							    \
+		return __write_flag(file, buf, count, ppos, &flag); \
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#99: FILE: security/provenance/fs.c:99:
+#define declare_read_flag_fcn(fcn_name, flag)			  \
+	static ssize_t fcn_name(struct file *filp,		  \
+				char __user *buf,		  \
+				size_t count,			  \
+				loff_t *ppos)			  \
+	{							  \
+		return __read_flag(filp, buf, count, ppos, flag); \
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#370: FILE: security/provenance/fs.c:370:
+#define declare_write_filter_fcn(fcn_name, filter)		  \
+	static ssize_t fcn_name(struct file *file,		  \
+				const char __user *buf,		  \
+				size_t count,			  \
+				loff_t *ppos)			  \
+	{							  \
+		return __write_filter(file, buf, count, &filter); \
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#379: FILE: security/provenance/fs.c:379:
+#define declare_read_filter_fcn(fcn_name, filter)		\
+	static ssize_t fcn_name(struct file *filp,		\
+				char __user *buf,		\
+				size_t count,			\
+				loff_t *ppos)			\
+	{							\
+		return __read_filter(filp, buf, count, filter);	\
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#583: FILE: security/provenance/fs.c:583:
+#define declare_write_ipv4_filter_fcn(fcn_name, filter)		       \
+	static ssize_t fcn_name(struct file *file,		       \
+				const char __user *buf,		       \
+				size_t count,			       \
+				loff_t *ppos)			       \
+	{							       \
+		return __write_ipv4_filter(file, buf, count, &filter); \
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#592: FILE: security/provenance/fs.c:592:
+#define declare_reader_ipv4_filter_fcn(fcn_name, filter)	      \
+	static ssize_t fcn_name(struct file *filp,		      \
+				char __user *buf,		      \
+				size_t count,			      \
+				loff_t *ppos)			      \
+	{							      \
+		return __read_ipv4_filter(filp, buf, count, &filter); \
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#653: FILE: security/provenance/fs.c:653:
+#define declare_generic_filter_write(function_name, filters, info, add_function, delete_function) \
+	static ssize_t function_name(struct file *file,						  \
+				     const char __user *buf,					  \
+				     size_t count,						  \
+				     loff_t *ppos)						  \
+	{											  \
+		struct filters *s;								  \
+		if (count < sizeof(struct info))						  \
+		return -ENOMEM;									  \
+		s = kzalloc (sizeof(struct filters), GFP_KERNEL);				  \
+		if (!s)										  \
+		return -ENOMEM;									  \
+		if (copy_from_user(&s->filter, buf, sizeof(struct info))) {			  \
+			kfree(s);								  \
+			return -EAGAIN;								  \
+		}										  \
+		if ((s->filter.op & PROV_SET_DELETE) != PROV_SET_DELETE) {			  \
+			add_function(s);							  \
+		} else {									  \
+			delete_function(s);							  \
+		} return sizeof(struct filters);						  \
+	}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#660: FILE: security/provenance/fs.c:660:
+		if (count < sizeof(struct info))						  \
+		return -ENOMEM;									  \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#662: FILE: security/provenance/fs.c:662:
+		s = kzalloc (sizeof(struct filters), GFP_KERNEL);				  \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#663: FILE: security/provenance/fs.c:663:
+		if (!s)										  \
+		return -ENOMEM;									  \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#676: FILE: security/provenance/fs.c:676:
+#define declare_generic_filter_read(function_name, filters, info)			    \
+	static ssize_t function_name(struct file *filp,					    \
+				     char __user *buf,					    \
+				     size_t count,					    \
+				     loff_t *ppos)					    \
+	{										    \
+		struct list_head *listentry, *listtmp;					    \
+		struct filters *tmp;							    \
+		size_t pos = 0;								    \
+		if (count < sizeof(struct info)) {					    \
+			return -ENOMEM; }						    \
+		list_for_each_safe(listentry, listtmp, &filters) {			    \
+			tmp = list_entry(listentry, struct filters, list);		    \
+			if (count < pos + sizeof(struct info)) {			    \
+				return -ENOMEM; }					    \
+			if (copy_to_user(buf + pos, &(tmp->filter), sizeof(struct info))) { \
+				return -EAGAIN; }					    \
+			pos += sizeof(struct info);					    \
+		}									    \
+		return pos;								    \
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#870: FILE: security/provenance/fs.c:870:
+#define hash_filters(filters, filters_type, tmp, tmp_type)						 \
+	do {												 \
+		list_for_each_safe(listentry, listtmp, &filters) {					 \
+			tmp = list_entry(listentry, struct filters_type, list);				 \
+			rc = crypto_shash_update(hashdesc, (u8 *)&tmp->filter, sizeof(struct tmp_type)); \
+			if (rc) {									 \
+				pr_err("Provenance: error updating hash.");				 \
+				pos = -EAGAIN;								 \
+				goto out;								 \
+			}										 \
+		}											 \
+	} while (0)

total: 0 errors, 12 warnings, 1142 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/fs.c has style problems, please review.
---------------------------
security/provenance/hooks.c
---------------------------
total: 0 errors, 0 warnings, 3211 lines checked

security/provenance/hooks.c has no obvious style problems and is ready for submission.
-----------------------------
security/provenance/machine.c
-----------------------------
total: 0 errors, 0 warnings, 52 lines checked

security/provenance/machine.c has no obvious style problems and is ready for submission.
-------------------------------
security/provenance/memcpy_ss.c
-------------------------------
total: 0 errors, 0 warnings, 67 lines checked

security/provenance/memcpy_ss.c has no obvious style problems and is ready for submission.
-------------------------------
security/provenance/netfilter.c
-------------------------------
total: 0 errors, 0 warnings, 118 lines checked

security/provenance/netfilter.c has no obvious style problems and is ready for submission.
-------------------------------
security/provenance/propagate.c
-------------------------------
total: 0 errors, 0 warnings, 44 lines checked

security/provenance/propagate.c has no obvious style problems and is ready for submission.
---------------------------
security/provenance/query.c
---------------------------
total: 0 errors, 0 warnings, 50 lines checked

security/provenance/query.c has no obvious style problems and is ready for submission.
---------------------------
security/provenance/relay.c
---------------------------
total: 0 errors, 0 warnings, 369 lines checked

security/provenance/relay.c has no obvious style problems and is ready for submission.
--------------------------
security/provenance/type.c
--------------------------
WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#147: FILE: security/provenance/type.c:147:
+#define MATCH_AND_RETURN(str1, str2, v)	\
+	do { if (strcmp(str1, str2) == 0) { return v; } } while (0)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#148: FILE: security/provenance/type.c:148:
+	do { if (strcmp(str1, str2) == 0) { return v; } } while (0)

total: 0 errors, 2 warnings, 548 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/type.c has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
